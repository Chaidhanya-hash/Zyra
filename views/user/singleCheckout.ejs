<style>
    .address-card.selected {
        border: 2px solid #DB4444;
    }

    .payment-method.selected {
        border-color: #007bff;
    }
</style>


<%- include('header') %>

<div class="container mx-auto mt-5 mb-5 main-checkout">
    <div>
        <!----------------------------- Shipping Address ------------------------------>
        <div class="shipping-address-container mb-8">
            <div class="shipping-head flex justify-between items-center border-b border-gray-300 pb-3">
                <h2 class="text-2xl font-semibold text-gray-800">Shipping Address</h2>
                <div class="text-right">
                    <% if (userDetails.address.length < 3) { %>
                        <a href="#" 
                            id="add-address-btn" 
                            title="Add New Address"
                            class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition"
                            onclick="openModal()">
                            Add Address
                        </a>
                    <% } else { %>
                        <span class="text-sm text-gray-500">Maximum 3 addresses allowed</span>
                    <% } %>
                </div>
            </div>
            <div class="address-cards grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
                <% if (!userDetails.address || userDetails.address.length === 0) { %>
                    <p class="text-gray-500 text-center col-span-full">No Address Found. Please add an Address.</p>
                <% } else { %>
                    <% userDetails.address.forEach((address, index) => { %>
                        <div class="address-card border border-gray-300 bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition cursor-pointer" onclick="selectAddress(this, '<%= index %>')">
                            <div class="address-info space-y-4">
                                <div class="checkout-icons flex justify-end space-x-3">
                                    <a href="/edit-Address-singlecheckout/<%= index %>" 
                                        title="Edit Address" 
                                        class="text-blue-600 hover:text-blue-800">
                                        ‚úèÔ∏è
                                    </a>
                                </div>
                                <h3 class="font-semibold text-lg text-gray-800">
                                    <%= address.building %>
                                </h3>
                                <p class="text-gray-600">
                                    Phone: <%= address.phoneNumber %>
                                </p>
                                <p class="text-gray-600">
                                    <%= address.city %>, <%= address.state %>, <%= address.country %>
                                </p>
                                <p class="text-gray-600">
                                    Pincode: <%= address.pincode %>
                                </p>
                            </div>
                        </div>
                    <% }) %>
                <% } %>
            </div>
        </div>
        

        <!----------------------------- Billing Info ------------------------------>
        <div class="billing-info-container bg-gray-50 border border-gray-300 p-6 rounded-lg shadow-lg">
            <div class="header flex items-center mb-6">
                <div class="icon text-2xl text-blue-500 mr-3">üìÑ</div>
                <h2 class="text-2xl font-semibold text-gray-800">Billing Info</h2>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                <div>
                    <label for="billing-name" class="block text-gray-700 font-medium mb-2">Name</label>
                    <input 
                        type="text" 
                        id="billing-name" 
                        name="customer_name" 
                        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition" 
                        placeholder="Enter name" 
                        value="<%= user.name %>">
                </div>
                <div>
                    <label for="billing-email-address" class="block text-gray-700 font-medium mb-2">Email Address</label>
                    <input 
                        type="email" 
                        id="billing-email-address" 
                        name="customer_email" 
                        class="w-full px-4 py-2 border border-gray-300 rounded-md bg-gray-100 focus:outline-none" 
                        placeholder="Enter email" 
                        value="<%= user.email %>" 
                        readonly>
                </div>
                <div>
                    <label for="billing-phone" class="block text-gray-700 font-medium mb-2">Phone</label>
                    <input 
                        type="text" 
                        id="billing-phone" 
                        name="phonenumber" 
                        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition" 
                        placeholder="Enter phone number" 
                        value="<%= user.phone %>">
                </div>
            </div>
        </div>
        

        <!---------------------------- Payment Options ------------------------------->
        <div class="payment-methods mt-8">
            <h2 class="text-xl font-bold mb-4">Payment method :</h2>
            <div class="payment-options grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div class="payment-method flex items-center border p-4 rounded shadow cursor-pointer hover:shadow-lg" onclick="selectPaymentMethod(this, 0)">
                    
                    <span>Cash on Delivery</span>
                </div>
                <div class="payment-method flex items-center border p-4 rounded shadow cursor-pointer hover:shadow-lg" onclick="selectPaymentMethod(this, 1)">
                    
                    <span>Wallet</span>
                    
                </div>
                <div class="payment-method flex items-center border p-4 rounded shadow cursor-pointer hover:shadow-lg" onclick="selectPaymentMethod(this, 2)">
                    
                    <span>Razorpay</span>
                </div>
            </div>
        </div>
    </div>

    <!----------------------------- Order Summary ------------------------------>
    <div class="order-summary bg-white rounded-lg shadow-md p-6 mt-8">
        <!-- Coupon Management -->
        <div class="coupon border-b pb-6 mb-6">
            <form class="cart-form">
                <div class="coupon-icon flex items-center space-x-2 mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-6 h-6 text-yellow-500" viewBox="0 0 16 16">
                        <path d="M8 0a2 2 0 0 1 2 2v1H6V2a2 2 0 0 1 2-2zm3 3v1h2.5a1.5 1.5 0 0 1 0 3H11v2h2.5a1.5 1.5 0 0 1 0 3H11v1a2 2 0 0 1-2 2v-4H7v4a2 2 0 0 1-2-2v-1H2.5a1.5 1.5 0 0 1 0-3H5V7H2.5a1.5 1.5 0 0 1 0-3H5V3h6zm-2 8H6v2h3v-2z" />
                    </svg>
                    <h3 class="text-lg font-semibold text-gray-800">Apply Coupon</h3>
                </div>
                <div class="flex gap-2 items-center">
                    <input 
                        type="text" 
                        id="couponCode" 
                        class="input-coupon border border-gray-300 rounded-lg px-4 py-2 w-full focus:ring focus:ring-yellow-200 focus:outline-none" 
                        name="couponCode" 
                        placeholder="Enter coupon code"
                    >
                    <button 
                        type="button" 
                        id="applyCouponBtn" 
                        onclick="applyCoupon()" 
                        class="btn bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition"
                    >
                        Apply
                    </button>
                </div>
            </form>
            <div id="couponBadge" class="pt-4 hidden">
                <span class="text-green-600 font-medium">Coupon Applied: <span id="appliedCouponCode"></span></span>
                <button 
                    type="button" 
                    class="btn bg-red-500 text-white text-sm px-3 py-1 rounded-lg hover:bg-red-600 ml-3"
                    onclick="removeCoupon()"
                >
                    Remove
                </button>
            </div>
        </div>
    
        <!-- Order Summary -->
        <div class="card bg-[#F4E3D3] rounded-lg shadow-md">
            <div class="card-header px-4 py-3 bg-gray-800 text-white rounded-t-lg">
                <h5 class="text-lg font-semibold">Order Summary</h5>
            </div>
            <div class="card-body p-4">
                <table class="table-auto w-full text-left text-gray-700">
                    <thead>
                        <tr class="border-b border-gray-400">
                            <th class="py-2">Product</th>
                            <th class="py-2">Price</th>
                            <th class="py-2">Discount</th>
                            <th class="py-2">Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (product) { %>
                            <tr class="border-b border-gray-400">
                                <td class="py-2">
                                    <%= product.productName %> x 1
                                </td>
                                <td class="py-2">
                                    <%= product.productPrice %>
                                </td>
                                <td class="py-2">
                                    <%= product.productDiscount %>%
                                </td>
                                <td class="py-2">
                                    <% totalAmount = product.productPrice - (product.productPrice * (product.productDiscount / 100)) %>
                                    ‚Çπ <%= totalAmount %>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                    <tfoot>
                        <tr class="border-t border-gray-400">
                            <th class="py-2">Sub Total</th>
                            <td></td>
                            <td></td>
                            <td class="py-2">
                                ‚Çπ <%= Math.round(totalAmount - totalAmount * (12 / 100)) %>
                            </td>
                        </tr>
                        <tr>
                            <th class="py-2">GST</th>
                            <td></td>
                            <td>12%</td>
                            <td class="py-2">
                                ‚Çπ <%= Math.round(totalAmount * (12 / 100)) %>
                            </td>
                        </tr>
                        <% if (totalAmount < 1000) { %>
                            <tr>
                                <th class="py-2">Shipping Charge</th>
                                <td></td>
                                <td></td>
                                <td class="py-2">‚Çπ 50</td>
                            </tr>
                        <% } %>
                        <tr class="coupon-row" style="display: none;">
                            <th>Coupon</th>
                            <th></th>
                            <th></th>
                            <th class="coupon-discount">
                            </th>
                        </tr>
                        <tr>
                            <th class="py-2 font-bold">Total</th>
                            <td></td>
                            <td></td>
                            <td class="py-2 font-bold text-lg total-payable-amount">
                                ‚Çπ <%= totalAmount %>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    
        <!-- Actions -->
        <div class="mt-8 flex justify-between items-center">
            <% if (totalAmount > 1000) { %>
                <div class="free-delivery flex items-center bg-green-500 text-white px-4 py-3 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-6 h-6 mr-2" viewBox="0 0 16 16">
                        <path d="M5.5 9.5a.5.5 0 0 1 .5-.5H7v-1H5.5a.5.5 0 0 1-.5-.5V7h3v5H6a.5.5 0 0 1-.5-.5v-2z" />
                        <path d="M6.5 1a.5.5 0 0 0-.5.5v3.293l-.146-.147a.5.5 0 0 0-.708.708l1 1a.5.5 0 0 0 .708 0l1-1a.5.5 0 0 0-.708-.708L7 4.793V1.5a.5.5 0 0 0-.5-.5z" />
                        <path d="M3 5a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H3zm11 6a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v4z" />
                    </svg>
                    <span>Your order is eligible for FREE Delivery.</span>
                </div>
            <% } %>
            <div class="flex gap-4">
                <a href="/cart">
                    <button class="btn bg-gray-300 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-400 transition">Cancel</button>
                </a>
                <form action="" method="post" id="place-order-form">
                    <button 
                        type="submit" 
                        class="btn bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition"
                        data-amount="<%= totalAmount %>" 
                        data-username="<%= user.name %>"
                        data-mail="<%= user.email %>" 
                        data-phone="<%= user.phone %>"
                        data-id="<%= product._id %>" 
                        id="place-order-btn"
                    >
                        Place Order
                    </button>
                </form>
            </div>
        </div>
    </div>
    

<!-- ---------------------------------- Address Adding Modal Box ---------------------------------------- -->
<div class="fixed inset-0 z-50 flex items-center justify-center hidden" id="addressModal">
    <div class="bg-white rounded-lg shadow-xl w-full max-w-md border-4 border-[#F4E3D3]">
        <div class="flex items-center justify-between p-4 border-b">
            <h5 class="text-lg font-medium">Add New Address</h5>
            <button type="button" class="text-gray-400 hover:text-gray-600" onclick="closeModal('addressModal')">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="p-4">
            <form method="post" id="checkAddress" action="/checkout-address">
                <div class="mb-4">
                    <label for="building" class="block text-sm font-medium text-gray-700">Flat, House no., Building, Company, Apartment</label>
                    <input type="text" name="building" id="building" placeholder="Enter your address" 
                        class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div class="mb-4">
                    <label for="street" class="block text-sm font-medium text-gray-700">Area, Street, Sector, Village</label>
                    <input type="text" name="street" id="street" placeholder="Enter your Area" 
                        class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div class="mb-4">
                    <label for="city" class="block text-sm font-medium text-gray-700">Town/City</label>
                    <input type="text" name="city" id="city" placeholder="Enter your City" 
                        class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    <div class="mb-4">
                        <label for="phonenumber" class="block text-sm font-medium text-gray-700">Phone Number</label>
                        <input type="text" name="phonenumber" id="phonenumber" placeholder="Contact Number" 
                            class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <div class="mb-4">
                        <label for="pincode" class="block text-sm font-medium text-gray-700">Pincode</label>
                        <input type="text" name="pincode" id="pincode" placeholder="Enter your Pincode" 
                            class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                </div>
                <div class="mb-4">
                    <label for="landmark" class="block text-sm font-medium text-gray-700">Land Mark</label>
                    <input type="text" name="landmark" id="landmark" placeholder="Enter Nearest Landmark" 
                        class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    <div class="mb-4">
                        <label for="state" class="block text-sm font-medium text-gray-700">State</label>
                        <input type="text" name="state" id="state" placeholder="Enter your state" 
                            class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <div class="mb-4">
                        <label for="country" class="block text-sm font-medium text-gray-700">Country</label>
                        <input type="text" name="country" id="country" placeholder="Enter your Country" 
                            class="block w-full px-3 py-2 mt-1 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                </div>
                <div class="flex items-center justify-end p-4 border-t">
                    <button type="button" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300" onclick="closeModal('addressModal')">Close</button>
                    <button type="submit" class="px-4 py-2 ml-3 text-sm font-medium text-white bg-red-500 rounded-md hover:bg-red-600">Save</button>
                </div>
            </form>
        </div>
                      
    </div>
</div>
</div>

<%- include('footer') %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    let selectedAddressIndex = null;
    let selectedPaymentMethod = null;

    const orderPlacementBtn = document.getElementById('place-order-btn');
    let totalAmount = orderPlacementBtn.getAttribute('data-amount');
    const username = orderPlacementBtn.getAttribute('data-username');
    const email = orderPlacementBtn.getAttribute('data-email');
    const phone = orderPlacementBtn.getAttribute('data-phone');
    let productId = orderPlacementBtn.getAttribute('data-id');

    function openModal() {
        document.getElementById('addressModal').classList.remove('hidden');
    }

    function closeModal() {
        document.getElementById('addressModal').classList.add('hidden');
    }

    function selectAddress(element, index) {
        const cards = document.querySelectorAll('.address-card');
        cards.forEach(card => card.classList.remove('selected'));
        element.classList.add('selected');
        selectedAddressIndex = index;
    }

    function selectPaymentMethod(element, method) {
        const methods = document.querySelectorAll('.payment-method');
        methods.forEach(methodElement => methodElement.classList.remove('selected'));
        element.classList.add('selected');
        selectedPaymentMethod = method;
    }

    orderPlacementBtn.addEventListener('click', (e) => {
        e.preventDefault();
            if (selectedAddressIndex === null) {
                Swal.fire({
                    icon: "warning",
                    title: "Please select a shipping address.",
                    text: "Select one"
                });
                return;
            }
            if (selectedPaymentMethod === null) {
                Swal.fire({
                    icon: "warning",
                    title: "Please select a payment method.",
                    text: "Select one"
                });
                return;
            }
            if (selectedPaymentMethod === 2) {
                openRazorpayPayment();
            } else {
                placeOrder(selectedAddressIndex, selectedPaymentMethod , productId);
            }
    });

        function openRazorpayPayment() {
            const URL = `/payment-render/${totalAmount}`;
            fetch(URL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(res => {
                    if (!res.ok) {
                        throw new Error("Cannot render the payment page");
                    }
                    return res.json();
                })
                .then(data => {
                    if (data.orderID) {
                        const options = {
                            key: "rzp_test_KDYrLJHnu3O9Ip",
                            amount: totalAmount * 100,
                            currency: "INR",
                            name: "Zyra",
                            order_id: data.orderID,
                            handler: function (response) {
                                const couponCode = document.getElementById('couponCode').value.trim();
                                const URL = `/singleOrder/${productId}/${selectedAddressIndex}/${selectedPaymentMethod}`;
                                fetch(URL, {
                                    method: "POST",
                                    headers: {
                                        'Content-Type': "application/json"
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        couponCode: couponCode
                                    })
                                }).then((res) => {
                                    if (res.redirected)
                                        window.location.href = res.url
                                    if (!res.ok) {
                                        throw new Error("Order placement failed");
                                    }
                                    return res.json();
                                }).then(data => {
                                    if (data.success) {
                                        window.location.href = "/conform-order";
                                    } else {
                                        Swal.fire({
                                            icon: "error",
                                            title: "Order Placement Failed",
                                            text: data.message
                                        });
                                    }
                                }).catch(err => {
                                    console.error("Error on Razorpay payment callback:", err);
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        text: "An error occurred while processing the order."
                                    });
                                });
                            },
                            prefill: {
                                name: username,
                                email: email,
                                contact: phone
                            },
                            notes: {
                                address: "Razorpay Corporate Office"
                            },
                            theme: {
                                color: "#6351CE"
                            }
                        };
                        const rzp1 = new Razorpay(options);
                        rzp1.on('payment.failed', function (response) {
                            const couponCode = document.getElementById('couponCode').value.trim();
                            const URL = `/place-order/${selectedAddressIndex}/${selectedPaymentMethod}`;
                            fetch(URL, {
                                method: "POST",
                                headers: {
                                    'Content-Type': "application/json"
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.error.metadata.payment_id,
                                    razorpay_order_id: response.error.metadata.order_id,
                                    razorpay_signature: response.error.metadata.signature,
                                    payment_status: "Pending",
                                    couponCode: couponCode
                                })
                            })
                                .then((res) => {
                                    if (res.redirected) {
                                        window.location.href = res.url;
                                    } else if (!res.ok) {
                                        throw new Error("Order placement failed");
                                    } else {
                                        return res.json();
                                    }
                                })
                                .then(data => {
                                    if (data.success) {
                                        
                                    } else {
                                        Swal.fire({
                                            icon: "error",
                                            title: "Order Placement Failed",
                                            text: data.message
                                        });
                                    }
                                })
                                .catch(err => {
                                    console.error("Error on payment failure callback:", err);
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        text: "An error occurred while processing the order."
                                    });
                                });
                        });
                        rzp1.open();
                    } else {
                        throw new Error("Order ID not received");
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: "error",
                        title: "Error on loading payment method",
                        text: error.message
                    });
                    console.error("Error during payment initiation:", error);
                });
        }

        function placeOrder(addressIndex, paymentMethod , productId) {
            const couponCode = document.getElementById('couponCode').value.trim();
            const URL = `/singleOrder/${productId}/${addressIndex}/${paymentMethod}`;
            fetch(URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    addressIndex: addressIndex,
                    paymentMode: paymentMethod,
                    productId : productId,
                    couponCode: couponCode
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = "/conform-order";
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Order Placement Failed",
                            text: data.message,
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Placement Failed',
                        text: error.message,
                    });
                });
        }
    //------------------ Validation for the add address modal --------------------

    document.addEventListener('DOMContentLoaded', (event) => {
            const checkAddress = document.getElementById('checkAddress');
            const building = document.getElementsByName('building')[0];
            const street = document.getElementsByName('street')[0];
            const city = document.getElementsByName('city')[0];
            const phone = document.getElementsByName('phonenumber')[0];
            const pincode = document.getElementsByName('pincode')[0];
            const landmark = document.getElementsByName('landmark')[0];
            const state = document.getElementsByName('state')[0];
            const country = document.getElementsByName('country')[0];

            function validatePhone(phone) {
                const phoneRe = /^\d{10}$/;
                return phoneRe.test(phone);
            }
            function validatePincode(pincode) {
                const pincodeRe = /^\d{6}$/;
                return pincodeRe.test(pincode);
            }
            checkAddress.addEventListener('submit', (e) => {
                e.preventDefault();
                if (building.value.trim() === "" || !isNaN(building.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Building field must not be empty and Not a Number.",
                        icon: "error"
                    });
                } else if (building.value.length > 50 || building.value.length < 4) {
                    Swal.fire({
                        title: "Error",
                        text: "Building field must be Greater than 4 letters and less than 50 letters.",
                        icon: "error"
                    });
                } else if (street.value.trim() === "" || !isNaN(street.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Street field must not be empty and Not a Number.",
                        icon: "error"
                    });
                } else if (street.value.length > 50 || street.value.length < 4) {
                    Swal.fire({
                        title: "Error",
                        text: "Street Field Must be Greater than 4 Letters and less than 50 letters.",
                        icon: "error"
                    });
                } else if (city.value.trim() === "" || !isNaN(city.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "City field must not be empty and Not a Number.",
                        icon: "error"
                    });
                } else if (city.value.length > 25 || city.value.length < 4) {
                    Swal.fire({
                        title: "Error",
                        text: "City field must be Greater than 4 Words and less than 25 Words.",
                        icon: "error"
                    });
                } 
                else if (!validatePhone(phone)) {
                    Swal.fire({
                        title: "Error",
                        text: "Phone number must be 10 digits.",
                        icon: "error"
                    });
                } 
                else if (!validatePincode(pincode.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Pincode must be 6 digits.",
                        icon: "error"
                    });
                } else if (landmark.value.trim() === "" || !isNaN(landmark.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Landmark field must not be empty.",
                        icon: "error"
                    });
                } else if (state.value.trim() === "" || !isNaN(state.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "State field must not be empty.",
                        icon: "error"
                    });
                } else if (country.value.trim() === "" || !isNaN(country.value)) {
                    Swal.fire({
                        title: "Error",
                        text: "Country field must not be empty.",
                        icon: "error"
                    });
                } else {
                    checkAddress.submit();
                }
            });
        });

        //--------------------------coupon management-----------------------------------

        async function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim();

            if (!couponCode) {
                showError("Please enter a coupon code.");
                return;
            }
            try {
                const res = await fetch('/singleCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ couponCode , totalAmount })
                });

                if (!res.ok) {
                    const error = await res.json();
                    showError(error.error || "An error occurred while applying the coupon.");
                    return;
                }

                const couponData = await res.json();
                updateOrderSummary(couponData.total, couponData.couponDiscount);
                showCouponBadge(couponCode);
            } catch (error) {
                document.getElementById('couponCode').value = '';
                showError("An error occurred while applying the coupon.....");
                console.log(`apply coupon error ${error}`);
            }
        }

        function updateOrderSummary(newPayableAmount, couponDiscount) {
            // Update the payable amount in the order summary
            const payableAmountElement = document.querySelector('td.total-payable-amount');
            payableAmountElement.innerText = newPayableAmount.toFixed(2);
            
            
            const couponRow = document.querySelector('.coupon-row');
            if (couponDiscount > 0) {
                couponRow.style.display = 'table-row';
                const couponElement = document.querySelector('.coupon-discount');
                if (couponElement) {
                    couponElement.innerText = couponDiscount.toFixed(2);
                }
            } else {
                couponRow.style.display = 'none';
            }
            totalAmount = newPayableAmount;
        }

        function showCouponBadge(couponCode) {
            const couponBadge = document.getElementById('couponBadge');
            const appliedCouponCode = document.getElementById('appliedCouponCode');
            couponBadge.style.display = 'block';
            appliedCouponCode.innerText = couponCode;
        }

        function removeCoupon() {
            document.getElementById('couponCode').value = '';
            document.getElementById('couponBadge').style.display = 'none';
            location.reload();
        }

        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: message
            });
        }
</script>