
<style>
    /* General Styles */
    .order-container {
        max-width: 100%;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        border: 1px solid #e2e8f0;
        margin-bottom: 1.5rem;
    }
    @media (max-width: 768px) {
        .grid {
            grid-template-columns: 1fr;
        }
    }

    /* Styling for Action Buttons */
    .btn {
        padding: 0.5rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 600;
        text-align: center;
    }

    .btn:hover {
        transform: scale(1.05);
    }

    /* Flexbox for Buttons */
    .flex-wrap {
        flex-wrap: wrap;
    }

    .transition {
        transition: all 0.3s ease-in-out;
    }
</style>

<%- include('header') %>

<%- include('alert') %>

<div class="container mx-auto mt-10">
    <h1 class="text-2xl font-bold text-center mb-6">My Orders</h1>
    <% if(orderDetails.length != 0) { %>
        <ul class="flex justify-center space-x-20 mb-6">
            <li>
                <a>
                <button class=" px-4 py-2  bg-red-500 text-white rounded-md focus:outline-none hover:bg-red-600 hover:text-black border-2 hover:border-red-500" id="all-orders-tab" onclick="filterOrders('All')">
                    All Orders
                </button>
                </a>
            </li>
            <li>
                <a>
                <button class="px-4 py-2 bg-red-500 text-white rounded-md focus:outline-none hover:bg-red-600 hover:text-black border-2 hover:border-red-500" id="returned-orders-tab" onclick="filterOrders('Returned')">
                    Returned Orders
                </button>
                </a>
            </li>
            <li>
                <a>
                <button class="px-4 py-2 bg-red-500 text-white rounded-md focus:outline-none hover:bg-red-600 hover:text-black border-2 hover:border-red-500" id="canceled-orders-tab" onclick="filterOrders('Cancelled')">
                    Canceled Orders
                </button>
                </a>
            </li>
            <li>
                <a>
                <button class="px-4 py-2 bg-red-500 text-white rounded-md focus:outline-none hover:bg-red-600 hover:text-black border-2 hover:border-red-500" id="delivered-orders-tab" onclick="filterOrders('Delivered')">
                    Delivered Orders
                </button>
                </a>
            </li>
        </ul>

        <div class="grid grid-cols-1 gap-6 mb-8" id="orderContainer">
            <% orderDetails.forEach((item, index) => { %>
                <div class="order-container bg-white shadow-lg rounded-xl p-6 border-2 border-gray-300" data-status="<%= item.orderStatus %>">
                    <% item.products.forEach((product, index) => { %>
                        <div class="flex items-start space-x-6 mb-6">
                            <img src="<%= product.product_image %>" class="w-24 h-24 rounded-lg object-cover">
                            <div class="flex-1">
                                <h5 class="text-lg font-semibold mb-2 text-gray-800"><%= product.product_name %></h5>
                                <p class="text-sm text-gray-700">Quantity: <b><%= product.product_quantity %></b></p>
                                <p class="text-sm text-gray-700">Price: <b>&#8377; <%= product.product_price.toLocaleString() %></b></p>
                            </div>
                        </div>
                        <hr class="border-gray-300 my-4">
                    <% }) %>
        
                    <!-- Order Summary -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6">
                        <div>
                            <p class="text-sm text-gray-600">Order Placed</p>
                            <h6 class="text-sm font-medium text-gray-800"><%= item.createdAt.toDateString() %></h6>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Order ID</p>
                            <h6 class="text-sm font-medium text-gray-800"><%= item.order_id %></h6>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Order Status</p>
                            <h6 class="text-sm font-medium">
                                <% if(item.orderStatus === 'Pending' || item.orderStatus === 'Failed') { %>
                                    <span class="text-blue-500">Payment <%= item.orderStatus %></span>
                                <% } else if(item.orderStatus === 'Confirmed' || item.orderStatus === 'Delivered') { %>
                                    <span class="text-green-500"><%= item.orderStatus %></span>
                                <% } else if(item.orderStatus === 'Returned') { %>
                                    <span class="text-red-500"><%= item.orderStatus %></span>
                                <% } else if(item.orderStatus === 'Cancelled') { %>
                                    <span class="text-yellow-500"><%= item.orderStatus %></span>
                                <% } else if(item.orderStatus === 'Shipped') { %>
                                    <span class="text-gray-500"><%= item.orderStatus %></span>
                                <% } %>
                            </h6>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Total Price</p>
                            <h6 class="text-sm font-medium text-gray-800">&#8377; <%= item.totalPrice.toLocaleString() %></h6>
                        </div>
                        <div class="text-center">
                            <a href="/orderDetail/<%= item._id %>" class="text-red-500 hover:text-red-600 transition">
                                Details
                            </a>
                        </div>
                    </div>
        
                    <!-- Action Buttons -->
                    <div class="flex flex-wrap justify-end space-x-4 mt-6">
                        <% if(item.paymentStatus === "Pending" || item.orderStatus === 'Failed') { %>
                            <button onclick="retryPayment('<%= item.id %>')" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition">Retry Payment</button>
                        <% } else if(item.orderStatus === 'Delivered') { %>
                            <button class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition" data-id="<%= item._id %>" onclick="returnOrder()">Return Order</button>
                            <button onclick="downloadInvoice('<%= item._id %>')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition">Invoice</button>
                        <% } else if(item.orderStatus === 'Confirmed' || item.orderStatus === 'Shipped') { %>
                            <button class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition" id="cancelOrder" data-id="<%= item._id %>" onclick="cancelOrder()">Cancel Order</button>
                            <button onclick="downloadInvoice('<%= item._id %>')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition">Invoice</button>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        </div>
        
        
        
          
    <% } else { %>
        <div class="flex justify-center items-center flex-col space-y-4 mt-10">
            <h2 class="text-xl text-gray-700">You have no orders</h2>
            <a href="/home" class="px-6 py-2 bg-red-500 text-white rounded-md">Shop Now</a>
        </div>
    <% } %>
</div>

<!-- -------------------------Pagination------------------------- -->
<% if(orderDetails.length > 0 && totalPages > 1) { %>
    <div class="pagination-controls flex justify-center mt-3 mb-8">
        <ul class="flex space-x-2">
            <% if (currentPage > 1) { %>
                <li>
                    <a class="px-4 py-2 text-gray-800 hover:text-blue-600"
                        href="/orders?page=<%= currentPage - 1 %>&limit=<%= limit %>">
                        Previous
                    </a>
                </li>
            <% } %>
        
            <% for (let i = 1; i <= totalPages; i++) { %>
                <li>
                    <a class="px-4 py-2 <%= currentPage == i ? 'bg-black text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> rounded-md"
                        href="/orders?page=<%= i %>&limit=<%= limit %>">
                        <%= i %>
                    </a>
                </li>
            <% } %>
        
            <% if (currentPage < totalPages) { %>
                <li>
                    <a class="px-4 py-2 text-gray-800 hover:text-blue-600"
                        href="/orders?page=<%= currentPage + 1 %>&limit=<%= limit %>">
                        Next
                    </a>
                </li>
            <% } %>
        </ul>
    </div>
<% } %>


<%- include('footer') %>

<!-------------------- Modal for Cancel Order ------------------------->

<div id="cancelOrderModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-md">
        <div class="px-6 py-4 border-b">
            <h5 class="text-lg font-semibold" id="cancelOrderModalLabel">Cancel Order</h5>
        </div>
        <div class="px-6 py-4">
            <form>
                <div class="mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10" />
                        <line x1="15" y1="9" x2="9" y2="15" />
                        <line x1="9" y1="9" x2="15" y2="15" />
                    </svg>
                    
                    <label for="cancelReason" class="block text-sm font-medium text-gray-700">Do you really want to cancel</label>
                </div>
            </form>
        </div>
        <div class="px-6 py-4 border-t flex justify-end space-x-4">
            <button type="button" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 focus:outline-none" 
                onclick="document.getElementById('cancelOrderModal').classList.add('hidden')">Close</button>
            <a class="px-4 py-2 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none" id="submitCancelOrder">Confirm</a>
        </div>
    </div>
</div>

<!-- -----------------Modal for return order----------------------------- -->

<div id="modalreturnOrder" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full">
        <div class="flex items-center justify-between border-b p-4">
            <h5 class="text-lg font-semibold" id="returnOrderLabel">Return Order</h5>
            <button type="button" class="text-gray-500 hover:text-gray-700" aria-label="Close" onclick="document.getElementById('modalreturnOrder').classList.add('hidden')">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="p-6">
            <form id="returnOrderForm">
                <!-- Hidden Input for Order ID -->
                <input type="hidden" id="orderId" name="orderId" value="">
                <!-- Reason for Return -->
                <div class="mb-4">
                    <label for="returnReason" class="block text-sm font-medium text-gray-700">Reason for Return</label>
                    <textarea
                        id="returnReason"
                        name="returnReason"
                        rows="3"
                        class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                        placeholder="Write your reason here..."
                        required></textarea>
                </div>
                <!-- Submit Button -->
                <button
                    type="submit"
                    class="w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                    Submit Return
                </button>
            </form>
        </div>
    </div>
</div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    //----------------------- filter order ------------------------------
    function filterOrders(status) {
        const orders = document.querySelectorAll('.order-container');
        orders.forEach(order => {
            if (status === 'All' || order.getAttribute('data-status') === status) {
                order.style.display = 'block';
            } else {
                order.style.display = 'none';
            }
        });
    }

    function cancelOrder(){
        document.getElementById('cancelOrderModal').classList.remove('hidden');
    }

    function returnOrder() {
        document.getElementById('modalreturnOrder').classList.remove('hidden');
    }
    

    //----------------------- cancel order ------------------------------
    document.querySelectorAll('#cancelOrder').forEach((btn) => {
        btn.addEventListener('click', function () {
            const orderId = this.getAttribute('data-id');
            document.getElementById('submitCancelOrder').setAttribute('href', `/cancelOrder/${orderId}`);
        });
    });
    document.getElementById('submitCancelOrder').addEventListener('click', function (event) {
        event.preventDefault();
        const href = this.getAttribute('href');
        console.log(href);
        fetch(href, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    icon: "success",
                    title: "Order Cancelled",
                    showConfirmButton: true,
                    timer: 1500         
                    });
                    setTimeout(()=>{
                        window.location.href = '/orders';
                    },1700);
                
            } else {
                Swal.fire({
                    icon: "warning",
                    title: "Failed to cancel order",
                    text: "Try Again"
                });
            }
        })
        .catch(error => console.error('Error:', error));
    });

    //----------------------------Return Order----------------------------

    document.addEventListener('DOMContentLoaded', () => {
                const returnOrderModal = document.getElementById('modalreturnOrder');
                document.querySelectorAll('[data-id]').forEach(button =>{
                    button.addEventListener('click',(event) => {
                        const orderId = button.getAttribute('data-id');
                        document.getElementById('orderId').value = orderId;
                    })
                })
                document.getElementById('returnOrderForm').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const orderId = document.getElementById('orderId').value;
                    const returnReason = document.getElementById('returnReason').value;
                    try {
                        const response = await fetch('/returnOrder', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ orderId, returnReason }),
                        });
                        const result = await response.json();
                        if (result.status === 'success') {
                            Swal.fire('Success', 'Order successfully returned', 'success').then(() => {
                                console.log('This is working');
                                window.location.reload();
                            });
                        } else {
                            Swal.fire('Error', result.message, 'error');
                        }
                    } catch (error) {
                        Swal.fire('Error', 'An error occurred while submitting the return request', 'error');
                    }
                });
            });

    //---------------------invoice----------------------------
    async function downloadInvoice(orderId) {
                const downloadUrl = `/download-invoice/${orderId}`;
                try {
                    const response = await fetch(downloadUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId: orderId })
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = `invoice-${orderId}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                } catch (error) {
                    console.error('There has been a problem with your fetch operation:', error);
                    Swal.fire({
                        icon: "warning",
                        title: "Failed to download invoice",
                        text: "Try Again"
                    });
                }
            }

    //------------------------retryPayment--------------------------------
    
async function retryPayment(orderId) {
    console.log('This is working');
                try {
                    const res = await fetch('/retryRazorPay', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId })
                    });

                    if (res.ok) {
                        const retryPaymentData = await res.json();
                        const options = {
                            key: 'rzp_test_KDYrLJHnu3O9Ip',
                            amount: retryPaymentData.amount,
                            currency: "INR",
                            name: "Zyra Skincare",
                            order_id: retryPaymentData.razorpayOrderId.id,
                            handler: async function (response) {
                                try {
                                    const resData = {
                                        orderId,
                                        razorpayOrderId: response.razorpay_order_id,
                                        paymentId: response.razorpay_payment_id,
                                    };
                                    const payment = await fetch('/retryPayment', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(resData)
                                    });

                                    if (payment.ok) {
                                        const paymentData = await payment.json();
                                        window.location.href = "/conform-order";
                                    } else {
                                        const error = await payment.text();
                                        showError(error);
                                    }
                                } catch (error) {
                                    console.error(`Handler error: ${error}`);
                                }
                            },
                            prefill: {
                                name: retryPaymentData.address.customer_name,
                                email: retryPaymentData.address.customer_email,
                                contact: retryPaymentData.address.phone
                            },
                            notes: {
                                address: retryPaymentData.address
                            },
                            theme: {
                                color: "#3399cc"
                            },
                            "modal": {
                                "ondismiss": function () {
                                    window.location.href = '/orders';
                                }
                            }
                        };
                        const rzp1 = new Razorpay(options);
                        rzp1.on('payment.failed', function (response) {
                            showError('Payment Failure');
                        });
                        rzp1.open();
                    } else {
                        const error = await res.text();
                        showError(error);
                    }
                } catch (error) {
                    console.error(`Error from retry payment fetch: ${error}`);
                }
            }
</script>
