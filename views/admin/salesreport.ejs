<div class=" min-h-screen flex flex-col">

    <%- include('header') %>


        <!-- Main Dashboard Section -->
        <div class="flex flex-grow ">

            <!-- Sidebar -->
            <aside class="bg-gradient-to-r from-gray-200 to-gray-600 text-black  w-64 lg:w-72 fixed top-0 left-0 py-6 px-5 shadow-lg transition-transform transform lg:translate-x-0 -translate-x-full lg:static z-50" 
       id="adminSidebar">
    <!-- Logo -->
    <div class="flex items-center justify-between mb-8">
        <h2 class="text-2xl font-bold tracking-wide">Admin Panel</h2>
        <button class="lg:hidden text-white text-2xl focus:outline-none" onclick="toggleSidebar()">Ã—</button>
    </div>

    <!-- Navigation -->
    <nav class="space-y-4">
        <!-- Dashboard -->
        <a href="/admin/dashboard" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Dashboard</span>
        </a>

        <!-- Salesreport -->
        <a href="/admin/salesReport" class="flex items-center space-x-4 py-3 px-4 rounded-lg bg-white text-[#4A148C] shadow-md hover:bg-gray-200 transition">
            <span class="text-sm font-medium">Sales Report</span>
        </a>

        <!-- Products -->
        <a href="/admin/products" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Products</span>
        </a>

        <!-- Category -->
        <a href="/admin/category" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Category</span>
        </a>

        <!-- Brands -->
        <a href="/admin/brand" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Brands</span>
        </a>

        <!-- Customers -->
        <a href="/admin/customers" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Customers</span>
        </a>

        <!-- Orders -->
        <a href="/admin/orders" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Orders</span>
        </a>

        <!-- Coupons -->
        <a href="/admin/coupons" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Coupons</span>
        </a>

        <!-- Offer -->
        <a href="/admin/offer" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Offers</span>
        </a>

        <!-- Logout -->
        <a href="/admin/logout" class="flex items-center space-x-4 py-3 px-4 rounded-lg hover:bg-white hover:text-[#4A148C] transition">
            <span class="text-sm font-medium">Logout</span>
        </a>
    </nav>
</aside>
            <!-- Main Content -->
            <div class="sale-table">
                <div class="main-content">
                    <div class="stats grid grid-cols-3 gap-4 mb-6">
                        <div class="stat-item bg-white p-4 rounded-lg shadow-md">
                            <p class="text-gray-600">Revenue</p>
                            <h2 class="text-2xl font-bold flex items-center">
                                <i class="fa-solid fa-indian-rupee-sign mr-2"></i>
                                <%= Revenue %>
                            </h2>
                        </div>
                        <div class="stat-item bg-white p-4 rounded-lg shadow-md">
                            <p class="text-gray-600">Orders</p>
                            <h2 class="text-2xl font-bold">
                                <%= orderCount %>
                            </h2>
                        </div>
                        <div class="stat-item bg-white p-4 rounded-lg shadow-md">
                            <p class="text-gray-600">Products Sold</p>
                            <h2 class="text-2xl font-bold">
                                <%= productCount %>
                            </h2>
                        </div>
                    </div>
                </div>
                <div class="w-full overflow-hidden rounded-lg shadow-md bg-white">
                    <form class="text-end m-4 flex flex-wrap gap-4 justify-end">
                        <div id="sales customRange" class="flex gap-2 items-center">
                            <input type="date" id="startDate" name="startDate" placeholder="Start Date" class="border p-2 rounded-md" onchange="getOrderData()">
                            <input type="date" id="endDate" name="endDate" placeholder="End Date" class="border p-2 rounded-md" onchange="getOrderData()">
                        </div>
                        <select name="salesreportType" id="salesreportType" onchange="getOrderData()" class="border p-2 rounded-md">
                            <option value="">Full Report</option>
                            <option value="monthly">Monthly</option>
                            <option value="yearly">Yearly</option>
                            <option value="weekly">Weekly</option>
                            <option value="custom">Custom Range</option>
                        </select>
                        <select name="reportType" id="reportType" class="border p-2 rounded-md">
                            <option value="PDF">PDF</option>
                            <option value="EXCEL">EXCEL</option>
                        </select>
                        <button type="button" onclick="downloadReport()" id="download-btn" class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">Download Report</button>
                    </form>
                    <div class="table-container overflow-x-auto">
                        <table class="table w-full text-left border-collapse">
                            <thead>
                                <tr class="bg-gray-200">
                                    <th scope="col" class="py-4 px-6">Order Id</th>
                                    <th scope="col" class="py-4 px-6">Customer</th>
                                    <th scope="col" class="py-4 px-6">Quantity</th>
                                    <th scope="col" class="py-4 px-6">Amount</th>
                                    <th scope="col" class="py-4 px-6">Payment</th>
                                    <th scope="col" class="py-4 px-6">Coupon</th>
                                    <th scope="col" class="py-4 px-6">Time</th>
                                    <th scope="col" class="py-4 px-6">Status</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-300" id="salesContent">
                                <!-- Dynamic content will go here -->
                            </tbody>
                        </table>
                        <div class="pagination-controls flex justify-center mt-4">
                            <ul class="flex space-x-2 pagination">
                                <!-- Pagination will be dynamically inserted here -->
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>

        <!-- Footer -->
        <%- include('footer') %>

    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
        <script>
            async function fetchData() {
                try {
                    const response = await fetch('/admin/getreport', { method: 'GET' });
                    const data = await response.json();
                    const labels = data.map(item => item._id);
                    const revenue = data.map(item => item.totalRevenue);
                    renderPieChart(labels, revenue);
                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            }

            function renderPieChart(labels, data) {
                const ctx = document.getElementById('piee').getContext('2d');
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: ['#1E3A8A', '#14B8A6', '#7C3AED', '#5fcd6d', 'red']
                        }]
                    }
                });

                const legendContainer = document.getElementById('legend');
                legendContainer.innerHTML = '';
                labels.forEach((label, index) => {
                    const color = ['#0e9f6e', '#1E3A8A', '#14B8A6', '#7C3AED'][index % 4];
                    const legendItem = document.createElement('div');
                    legendItem.classList.add('flex', 'items-center');
                    legendItem.innerHTML = `<span class="inline-block w-3 h-3 mr-1" style="background-color: ${color}"></span><span>${label}</span>`;
                    legendContainer.appendChild(legendItem);
                });
            }

            async function fetchSalesData() {
                try {
                    const response = await fetch('/admin/getsalesbymonth', { method: 'GET' });
                    const data = await response.json();
                    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    const salesData = Array(12).fill(0);
                    const countData = Array(12).fill(0);
                    data.forEach(item => {
                        salesData[item._id.month - 1] = item.totalSales;
                        countData[item._id.month - 1] = item.count;
                    });
                    renderBarChart(months, salesData, countData);
                } catch (error) {
                    console.error('Error fetching sales data:', error);
                }
            }

            function renderBarChart(labels, salesData, countData) {
                const ctx = document.getElementById('bars').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Sales Amount',
                                data: salesData,
                                backgroundColor: '#1E3A8A'
                            },
                            {
                                label: 'Count of Purchases',
                                data: countData,
                                backgroundColor: '#14B8A6'
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            document.getElementById('reportType').addEventListener('change', (e) => {
                const customRange = document.getElementById('customRange');
                const reportValue = document.getElementById('reportType').value;
                customRange.style.display = reportValue === 'custom' ? 'inline-block' : 'none';

                switch (reportValue) {
                    case 'custom':
                        fetchSalesData();
                        break;
                    case 'Monthly':
                        fetchMonthlySalesData();
                        break;
                    case 'yearly':
                        fetchYearlySalesData();
                        break;
                    case 'weekly':
                        fetchweeklySalesData();
                        break;
                }
            });

            async function getOrderData(page = 1) {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const salesreportType = document.getElementById('salesreportType').value;
                const limit = 5;

                try {
                    const response = await fetch('/admin/fetch-sales-data', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ salesreportType, startDate, endDate, page, limit })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch order data');
                    }

                    const { orderDetails, totalPages, currentPage } = await response.json();
                    let content = '';

                    if (!orderDetails || orderDetails.length === 0) {
                        content = `
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    No data found
                                </td>
                            </tr>`;
                    } else {
                        orderDetails.forEach(data => {
                            const formattedDate = new Date(data.createdAt).toLocaleDateString();
                            content += `
                                <tr class="hover:bg-gray-50">
                                    <td class="px-4 py-3">#${data.order_id}</td>
                                    <td class="px-4 py-3">${data.address.customer_name}</td>
                                    <td class="px-4 py-3">${data.totalQuantity}</td>
                                    <td class="px-4 py-3">â‚¹${data.totalPrice}</td>
                                    <td class="px-4 py-3">${data.paymentMethod}</td>
                                    <td class="px-4 py-3">${data.coupen_data?.length > 0 ? data.coupen_data[0].coupen_name : 'No Coupon'}</td>
                                    <td class="px-4 py-3">${formattedDate}</td>
                                    <td class="px-4 py-3">${getStatusBadge(data.orderStatus)}</td>
                                </tr>`;
                        });
                    }

                    document.getElementById('salesContent').innerHTML = content;

                    // Update pagination
                    const paginationHTML = generatePaginationControls(currentPage, totalPages);
                    document.querySelector('.pagination').innerHTML = paginationHTML;

                } catch (error) {
                    console.error('Error fetching order data:', error);
                    document.getElementById('salesContent').innerHTML = `
                        <tr>
                            <td colspan="8" class="text-center py-4 text-red-500">
                                Failed to fetch order data. Please try again later.
                            </td>
                        </tr>`;
                }
            }

            // Add this helper function for pagination
            function generatePaginationControls(currentPage, totalPages) {
                let paginationHTML = '';
                
                if (currentPage > 1) {
                    paginationHTML += `
                        <li>
                            <button onclick="getOrderData(${currentPage - 1})" class="px-3 py-1 rounded-md bg-gray-200 hover:bg-gray-300">
                                Previous
                            </button>
                        </li>`;
                }
                
                for (let i = 1; i <= totalPages; i++) {
                    paginationHTML += `
                        <li>
                            <button onclick="getOrderData(${i})" 
                                class="px-3 py-1 rounded-md ${currentPage === i ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}">
                                ${i}
                            </button>
                        </li>`;
                }
                
                if (currentPage < totalPages) {
                    paginationHTML += `
                        <li>
                            <button onclick="getOrderData(${currentPage + 1})" class="px-3 py-1 rounded-md bg-gray-200 hover:bg-gray-300">
                                Next
                            </button>
                        </li>`;
                }
                
                return paginationHTML;
            }

            function getStatusBadge(status) {
                switch (status) {
                    case 'Pending':
                        return `<h6 class="text-warning">${status}</h6>`;
                    case 'Confirmed':
                    case 'Delivered':
                        return `<h6 class="text-success">${status}</h6>`;
                    case 'Returned':
                        return `<h6 class="text-danger">${status}</h6>`;
                    case 'Cancelled':
                        return `<h6 class="text-wanning">${status}</h6>`;
                    case 'Shipped':
                        return `<h6 class="text-info">${status}</h6>`;
                    default:
                        return status;
                }
            }
            async function downloadReport() {
                let startDate, endDate;
                const salesreportType = document.getElementById('salesreportType').value;
                const reportType = document.getElementById('reportType').value;

                const currentDate = new Date();
                if (salesreportType === 'custom') {
                    startDate = new Date(document.getElementById('startDate').value);
                    endDate = new Date(document.getElementById('endDate').value);
                } else {
                    switch (salesreportType) {
                        case 'monthly':
                            startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
                            break;
                        case 'weekly':
                            startDate = new Date(currentDate);
                            startDate.setDate(currentDate.getDate() - currentDate.getDay());
                            break;
                        case 'yearly':
                            startDate = new Date(currentDate.getFullYear(), 0, 1);
                            break;
                    }
                    endDate = currentDate;
                }

                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 999);

                try {
                    const response = await fetch('/admin/downloadPDF', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ salesreportType, startDate, endDate, reportType })
                    });

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = reportType === 'PDF' ? 'sales_report.pdf' : 'sales_report.csv';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                } catch (error) {
                    console.error('Error downloading report:', error);
                }
            }
            fetchData();
            fetchSalesData();
            getOrderData();

        </script>